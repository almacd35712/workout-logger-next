import { google } from "googleapis";
import credentials from "@/lib/credentials.json";

export default async function handler(req, res) {
  const { day, exercise } = req.query;
  if (!day || !exercise) {
    return res.status(400).json({ error: "Missing day or exercise" });
  }

  try {
    const auth = new google.auth.GoogleAuth({
      credentials,
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });

    const sheets = google.sheets({ version: "v4", auth });
    const spreadsheetId = "1kge0xQANIYQyy61Qeh2zsuETfnb0WjIUt3h33byskjA";
    const sheetName = day === "Abs" ? "Abs Log" : "March/april 2025";
    const range = `${sheetName}!A:Z`;

    const result = await sheets.spreadsheets.values.get({ spreadsheetId, range });
    const rows = result.data.values || [];

    const normalize = (str) =>
      str?.toLowerCase().trim().replace(/\s+/g, "") || "";

    const normalizedDay = normalize(day);
    const normalizedExercise = normalize(exercise);

    let dayStart = -1;
    let nextDayRow = rows.length;

    console.log("üîç Looking for day block:", normalizedDay);

    for (let i = 0; i < rows.length; i++) {
      const val = normalize(rows[i][0]);
      if (val?.startsWith("day") && val.includes(normalizedDay)) {
        console.log(`‚úÖ Found start of block for day: "${rows[i][0]}" at row ${i}`);
        dayStart = i;
        for (let j = i + 1; j < rows.length; j++) {
          const next = normalize(rows[j][0]);
          if (next.startsWith("day")) {
            nextDayRow = j;
            console.log(`‚õî Reached next day block at row ${j}, stopping search`);
            break;
          }
        }
        break;
      }
    }

    if (dayStart === -1) {
      return res.status(404).json({ error: "Day block not found" });
    }

    // üß™ Scan for exercise in this day block
    // üß™ Scan for exercise in this day block
    let exerciseRow = -1;
    console.log(`üîç Scanning rows ${dayStart + 1} to ${nextDayRow} for "${normalizedExercise}"`);
    
    for (let i = dayStart + 1; i < nextDayRow; i++) {
      const a = normalize(rows[i]?.[0] || "");
      const b = normalize(rows[i]?.[1] || "");
      const c = normalize(rows[i]?.[2] || "");
    
      const skip = ["chest", "legs", "delts+arms", "back", "warmup", "warm-up", "abs"];
      const isSkipRow = skip.includes(a) || skip.includes(b) || (!b && !c);
    
      if (isSkipRow) continue;
    
      console.log(`üß™ Checking row ${i}: b="${b}" c="${c}" vs "${normalizedExercise}"`);
    
      if (b === normalizedExercise || c === normalizedExercise) {
        console.log(`‚úÖ Matched "${exercise}" at row ${i}`);
        exerciseRow = i;
        break;
      }
    }
    


    if (exerciseRow === -1) {
      return res.status(404).json({ error: "Exercise not found in this day block" });
    }

    const headerRow = rows[0] || [];
    const actualCols = headerRow
      .map((val, idx) => ({ val: val?.toLowerCase(), idx }))
      .filter((col) => col.val?.includes("actual"))
      .map((col) => col.idx);

    let setCount = 0;
    let lastActual = "";
    let lastWeight = null;

    for (const col of actualCols.reverse()) {
      for (let i = exerciseRow + 1; i <= exerciseRow + 3; i++) {
        const cell = rows[i]?.[col];
        if (!cell) continue;
        const isWarmup = cell.toLowerCase().includes("warm") || cell.includes("x5") || cell.includes("x10") || cell.includes("x3");
        if (isWarmup) continue;
    
        setCount++;
        if (!lastActual) {
          lastActual = cell;
          const match = cell.match(/^(\d+(?:\.\d+)?)\s*x\s*\d+/);
          if (match) lastWeight = parseFloat(match[1]);
        }
      }
      if (setCount >= 3) break;
    }
    

    const prescribedSet = rows[exerciseRow]?.[actualCols[0] - 1] || "";
    const suggestedWeight = lastWeight ? Math.round(lastWeight * 1.025) : null;

    let warmupSets = [];
    if (suggestedWeight) {
      const round5 = (x) => Math.round(x / 5) * 5;
      warmupSets = [
        `${round5(suggestedWeight * 0.4)} x 10`,
        `${round5(suggestedWeight * 0.6)} x 5`,
        `${round5(suggestedWeight * 0.8)} x 3`,
      ];
    }

    return res.status(200).json({
      setCount,
      lastActual: lastActual || null,
      prescribedSet,
      suggestedWeight,
      warmupSets,
    });
  } catch (err) {
    console.error("getsetcount error", err);
    return res.status(500).json({ error: "Internal server error" });
  }
}
